#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ü–û–õ–ù–û–ô –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –í–°–ï–ú–ò –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ñ–µ—Ä–º–µ–Ω—Ç–∞–º–∏ –∏ –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞–º–∏
–í–∫–ª—é—á–∞–µ—Ç —Ç—ã—Å—è—á–∏ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤ –∏ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
"""
import sqlite3
import logging
import random
from pathlib import Path
from typing import Dict, List, Any

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CompleteMetabolomeImporter:
    def __init__(self, db_path: str = "data/metabolome.db"):
        self.db_path = db_path
        
        # –°–µ–º–µ–π—Å—Ç–≤–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤
        self.enzyme_families = {
            "1": "–û–∫—Å–∏–¥–æ—Ä–µ–¥—É–∫—Ç–∞–∑—ã",
            "2": "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–∑—ã", 
            "3": "–ì–∏–¥—Ä–æ–ª–∞–∑—ã",
            "4": "–õ–∏–∞–∑—ã",
            "5": "–ò–∑–æ–º–µ—Ä–∞–∑—ã",
            "6": "–õ–∏–≥–∞–∑—ã",
            "7": "–¢—Ä–∞–Ω—Å–ª–æ–∫–∞–∑—ã"
        }
        
        # –û—Ä–≥–∞–Ω–∏–∑–º—ã
        self.organisms = [
            # –†–∞—Å—Ç–µ–Ω–∏—è
            "Arabidopsis thaliana", "Oryza sativa", "Zea mays", "Triticum aestivum",
            "Glycine max", "Solanum lycopersicum", "Brassica napus", "Medicago truncatula",
            "Populus trichocarpa", "Vitis vinifera", "Nicotiana tabacum", "Hordeum vulgare",
            "Phaseolus vulgaris", "Sorghum bicolor", "Setaria italica", "Pisum sativum",
            "Helianthus annuus", "Cucumis sativus", "Capsicum annuum", "Spinacia oleracea",
            "Beta vulgaris", "Lactuca sativa", "Daucus carota", "Allium cepa", "Citrus sinensis",
            # –ú–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º—ã
            "Escherichia coli", "Saccharomyces cerevisiae", "Bacillus subtilis",
            "Streptomyces coelicolor", "Pseudomonas aeruginosa", "Rhizobium leguminosarum",
            "Agrobacterium tumefaciens", "Lactobacillus plantarum", "Clostridium acetobutylicum",
            "Zymomonas mobilis", "Aspergillus niger", "Penicillium chrysogenum",
            "Candida albicans", "Neurospora crassa", "Trichoderma reesei",
            # –ñ–∏–≤–æ—Ç–Ω—ã–µ
            "Homo sapiens", "Mus musculus", "Rattus norvegicus", "Drosophila melanogaster",
            "Caenorhabditis elegans", "Danio rerio", "Gallus gallus", "Bos taurus",
            "Sus scrofa", "Ovis aries", "Capra hircus"
        ]

    def create_complete_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ –í–°–ï–ú–ò —Ñ–µ—Ä–º–µ–Ω—Ç–∞–º–∏ –∏ –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞–º–∏"""
        logger.info("üöÄ –°–æ–∑–¥–∞–µ–º –ü–û–õ–ù–£–Æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ –í–°–ï–ú–ò —Ñ–µ—Ä–º–µ–Ω—Ç–∞–º–∏ –∏ –º–µ—Ç–∞–±–æ–ª–∏—Ç–∞–º–∏...")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("DROP TABLE IF EXISTS metabolite_enzyme")
        cursor.execute("DROP TABLE IF EXISTS metabolite_pathway")
        cursor.execute("DROP TABLE IF EXISTS metabolites")
        cursor.execute("DROP TABLE IF EXISTS enzymes")
        cursor.execute("DROP TABLE IF EXISTS pathways")
        cursor.execute("DROP TABLE IF EXISTS classes")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        self._create_all_tables(cursor)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("üìã –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã...")
        classes_cache = self._import_classes(cursor)
        
        logger.info("üîÑ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏...")
        pathways_cache = self._import_pathways(cursor)
        
        logger.info("üß™ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–µ—Ä–º–µ–Ω—Ç—ã...")
        enzymes_cache = self._import_all_enzymes(cursor)
        
        logger.info("üß¨ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã...")
        self._import_all_metabolites(cursor, classes_cache, pathways_cache, enzymes_cache)
        
        conn.commit()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM classes")
        class_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM pathways")
        pathway_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM enzymes")
        enzyme_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM metabolites")
        metabolite_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM metabolite_enzyme")
        enzyme_connections = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM metabolite_pathway")
        pathway_connections = cursor.fetchone()[0]
        
        conn.close()
        
        logger.info("üéâ –ü–û–õ–ù–ê–Ø –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞!")
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   ‚úÖ –ö–ª–∞—Å—Å–æ–≤: {class_count}")
        logger.info(f"   ‚úÖ –ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π: {pathway_count}")
        logger.info(f"   ‚úÖ –§–ï–†–ú–ï–ù–¢–û–í: {enzyme_count}")
        logger.info(f"   ‚úÖ –ú–ï–¢–ê–ë–û–õ–ò–¢–û–í: {metabolite_count}")
        logger.info(f"   üîó –°–≤—è–∑–µ–π –º–µ—Ç–∞–±–æ–ª–∏—Ç-—Ñ–µ—Ä–º–µ–Ω—Ç: {enzyme_connections}")
        logger.info(f"   üîó –°–≤—è–∑–µ–π –º–µ—Ç–∞–±–æ–ª–∏—Ç-–ø—É—Ç—å: {pathway_connections}")

    def _create_all_tables(self, cursor):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∞—Å—Å–æ–≤
        cursor.execute("""
            CREATE TABLE classes (
                id INTEGER PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                name_ru VARCHAR(255)
            );
        """)
        
        cursor.execute("CREATE INDEX ix_classes_id ON classes (id);")
        cursor.execute("CREATE INDEX ix_classes_name ON classes (name);")
        cursor.execute("CREATE INDEX ix_classes_name_ru ON classes (name_ru);")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—É—Ç–µ–π
        cursor.execute("""
            CREATE TABLE pathways (
                id INTEGER PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                name_ru VARCHAR(255),
                source VARCHAR(50),
                ext_id VARCHAR(50)
            );
        """)
        
        cursor.execute("CREATE INDEX ix_pathways_id ON pathways (id);")
        cursor.execute("CREATE INDEX ix_pathways_name ON pathways (name);")
        cursor.execute("CREATE INDEX ix_pathways_name_ru ON pathways (name_ru);")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤
        cursor.execute("""
            CREATE TABLE enzymes (
                id INTEGER PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                name_ru VARCHAR(255),
                uniprot_id VARCHAR(50) UNIQUE,
                ec_number VARCHAR(50),
                organism VARCHAR(255),
                organism_type VARCHAR(100),
                family VARCHAR(255),
                description TEXT,
                molecular_weight REAL,
                optimal_ph REAL,
                optimal_temperature REAL,
                brenda_id VARCHAR(50),
                kegg_enzyme_id VARCHAR(50),
                protein_name VARCHAR(500),
                gene_name VARCHAR(100),
                tissue_specificity TEXT,
                subcellular_location VARCHAR(255)
            );
        """)
        
        cursor.execute("CREATE INDEX ix_enzymes_id ON enzymes (id);")
        cursor.execute("CREATE INDEX ix_enzymes_name ON enzymes (name);")
        cursor.execute("CREATE INDEX ix_enzymes_name_ru ON enzymes (name_ru);")
        cursor.execute("CREATE INDEX ix_enzymes_ec_number ON enzymes (ec_number);")
        cursor.execute("CREATE INDEX ix_enzymes_organism_type ON enzymes (organism_type);")
        cursor.execute("CREATE INDEX ix_enzymes_family ON enzymes (family);")
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤
        cursor.execute("""
            CREATE TABLE metabolites (
                id INTEGER PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                name_ru VARCHAR(255),
                formula VARCHAR(100),
                exact_mass REAL,
                hmdb_id VARCHAR(50),
                chebi_id VARCHAR(50),
                kegg_id VARCHAR(50),
                pubchem_cid VARCHAR(50),
                class_id INTEGER,
                FOREIGN KEY (class_id) REFERENCES classes (id)
            );
        """)
        
        cursor.execute("CREATE INDEX ix_metabolites_id ON metabolites (id);")
        cursor.execute("CREATE INDEX ix_metabolites_name ON metabolites (name);")
        cursor.execute("CREATE INDEX ix_metabolites_name_ru ON metabolites (name_ru);")
        cursor.execute("CREATE INDEX ix_metabolites_exact_mass ON metabolites (exact_mass);")
        cursor.execute("CREATE INDEX ix_metabolites_formula ON metabolites (formula);")
        
        # –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            CREATE TABLE metabolite_pathway (
                metabolite_id INTEGER NOT NULL,
                pathway_id INTEGER NOT NULL,
                PRIMARY KEY (metabolite_id, pathway_id),
                FOREIGN KEY (metabolite_id) REFERENCES metabolites (id),
                FOREIGN KEY (pathway_id) REFERENCES pathways (id)
            );
        """)
        
        cursor.execute("""
            CREATE TABLE metabolite_enzyme (
                metabolite_id INTEGER NOT NULL,
                enzyme_id INTEGER NOT NULL,
                PRIMARY KEY (metabolite_id, enzyme_id),
                FOREIGN KEY (metabolite_id) REFERENCES metabolites (id),
                FOREIGN KEY (enzyme_id) REFERENCES enzymes (id)
            );
        """)

    def _import_classes(self, cursor):
        """–ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        classes = [
            ("Amino acids", "–ê–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã"),
            ("Carbohydrates", "–£–≥–ª–µ–≤–æ–¥—ã"),
            ("Lipids", "–õ–∏–ø–∏–¥—ã"),
            ("Nucleotides", "–ù—É–∫–ª–µ–æ—Ç–∏–¥—ã"),
            ("Organic acids", "–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–∏—Å–ª–æ—Ç—ã"),
            ("Vitamins", "–í–∏—Ç–∞–º–∏–Ω—ã"),
            ("Alkaloids", "–ê–ª–∫–∞–ª–æ–∏–¥—ã"),
            ("Phenols", "–§–µ–Ω–æ–ª—ã"),
            ("Terpenes", "–¢–µ—Ä–ø–µ–Ω—ã"),
            ("Steroids", "–°—Ç–µ—Ä–æ–∏–¥—ã"),
            ("Proteins", "–ë–µ–ª–∫–∏"),
            ("Enzymes", "–§–µ—Ä–º–µ–Ω—Ç—ã"),
            ("Flavonoids", "–§–ª–∞–≤–æ–Ω–æ–∏–¥—ã"),
            ("Carotenoids", "–ö–∞—Ä–æ—Ç–∏–Ω–æ–∏–¥—ã"),
            ("Chlorophylls", "–•–ª–æ—Ä–æ—Ñ–∏–ª–ª—ã"),
            ("Anthocyanins", "–ê–Ω—Ç–æ—Ü–∏–∞–Ω—ã"),
            ("Saponins", "–°–∞–ø–æ–Ω–∏–Ω—ã"),
            ("Glycosides", "–ì–ª–∏–∫–æ–∑–∏–¥—ã"),
            ("Tannins", "–¢–∞–Ω–∏–Ω—ã"),
            ("Lignins", "–õ–∏–≥–Ω–∏–Ω—ã"),
            ("Cellulose", "–¶–µ–ª–ª—é–ª–æ–∑–∞"),
            ("Starch", "–ö—Ä–∞—Ö–º–∞–ª"),
            ("Pectins", "–ü–µ–∫—Ç–∏–Ω—ã"),
            ("Fatty acids", "–ñ–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã"),
            ("Phospholipids", "–§–æ—Å—Ñ–æ–ª–∏–ø–∏–¥—ã"),
            ("Glycolipids", "–ì–ª–∏–∫–æ–ª–∏–ø–∏–¥—ã"),
            ("Sphingolipids", "–°—Ñ–∏–Ω–≥–æ–ª–∏–ø–∏–¥—ã"),
            ("Prostaglandins", "–ü—Ä–æ—Å—Ç–∞–≥–ª–∞–Ω–¥–∏–Ω—ã"),
            ("Hormones", "–ì–æ—Ä–º–æ–Ω—ã"),
            ("Neurotransmitters", "–ù–µ–π—Ä–æ–º–µ–¥–∏–∞—Ç–æ—Ä—ã")
        ]
        
        classes_cache = {}
        for eng_name, ru_name in classes:
            cursor.execute(
                "INSERT INTO classes (name, name_ru) VALUES (?, ?)",
                (eng_name, ru_name)
            )
            class_id = cursor.lastrowid
            classes_cache[eng_name] = class_id
            classes_cache[ru_name] = class_id
        
        return classes_cache

    def _import_pathways(self, cursor):
        """–ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π"""
        pathways = [
            ("Glycolysis", "–ì–ª–∏–∫–æ–ª–∏–∑"),
            ("Citric acid cycle", "–¶–∏–∫–ª –ö—Ä–µ–±—Å–∞"),
            ("Gluconeogenesis", "–ì–ª—é–∫–æ–Ω–µ–æ–≥–µ–Ω–µ–∑"),
            ("Pentose phosphate pathway", "–ü–µ–Ω—Ç–æ–∑–æ—Ñ–æ—Å—Ñ–∞—Ç–Ω—ã–π –ø—É—Ç—å"),
            ("Fatty acid synthesis", "–°–∏–Ω—Ç–µ–∑ –∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç"),
            ("Fatty acid oxidation", "–û–∫–∏—Å–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç"),
            ("Amino acid metabolism", "–ú–µ—Ç–∞–±–æ–ª–∏–∑–º –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç"),
            ("Nucleotide synthesis", "–°–∏–Ω—Ç–µ–∑ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–æ–≤"),
            ("Photosynthesis", "–§–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑"),
            ("Calvin cycle", "–¶–∏–∫–ª –ö–∞–ª—å–≤–∏–Ω–∞"),
            ("Electron transport chain", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è —Ü–µ–ø—å"),
            ("Urea cycle", "–ú–æ—á–µ–≤–∏–Ω–Ω—ã–π —Ü–∏–∫–ª"),
            ("Cholesterol synthesis", "–°–∏–Ω—Ç–µ–∑ —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞"),
            ("Steroid synthesis", "–°–∏–Ω—Ç–µ–∑ —Å—Ç–µ—Ä–æ–∏–¥–æ–≤"),
            ("Protein synthesis", "–°–∏–Ω—Ç–µ–∑ –±–µ–ª–∫–æ–≤"),
            ("DNA replication", "–†–µ–ø–ª–∏–∫–∞—Ü–∏—è –î–ù–ö"),
            ("RNA transcription", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –†–ù–ö"),
            ("Cell wall synthesis", "–°–∏–Ω—Ç–µ–∑ –∫–ª–µ—Ç–æ—á–Ω–æ–π —Å—Ç–µ–Ω–∫–∏"),
            ("Lignin synthesis", "–°–∏–Ω—Ç–µ–∑ –ª–∏–≥–Ω–∏–Ω–∞"),
            ("Flavonoid synthesis", "–°–∏–Ω—Ç–µ–∑ —Ñ–ª–∞–≤–æ–Ω–æ–∏–¥–æ–≤"),
            ("Phenylpropanoid pathway", "–§–µ–Ω–∏–ª–ø—Ä–æ–ø–∞–Ω–æ–∏–¥–Ω—ã–π –ø—É—Ç—å"),
            ("Nitrogen assimilation", "–ê—Å—Å–∏–º–∏–ª—è—Ü–∏—è –∞–∑–æ—Ç–∞"),
            ("Sulfur metabolism", "–ú–µ—Ç–∞–±–æ–ª–∏–∑–º —Å–µ—Ä—ã"),
            ("Carbohydrate metabolism", "–ú–µ—Ç–∞–±–æ–ª–∏–∑–º —É–≥–ª–µ–≤–æ–¥–æ–≤"),
            ("Lipid metabolism", "–ú–µ—Ç–∞–±–æ–ª–∏–∑–º –ª–∏–ø–∏–¥–æ–≤"),
            ("Light reactions", "–°–≤–µ—Ç–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏"),
            ("Dark reactions", "–¢–µ–º–Ω–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏"),
            ("Photorespiration", "–§–æ—Ç–æ–¥—ã—Ö–∞–Ω–∏–µ"),
            ("C4 pathway", "C4 –ø—É—Ç—å"),
            ("CAM pathway", "CAM –ø—É—Ç—å"),
            ("Starch synthesis", "–°–∏–Ω—Ç–µ–∑ –∫—Ä–∞—Ö–º–∞–ª–∞"),
            ("Cellulose synthesis", "–°–∏–Ω—Ç–µ–∑ —Ü–µ–ª–ª—é–ª–æ–∑—ã"),
            ("Pectin synthesis", "–°–∏–Ω—Ç–µ–∑ –ø–µ–∫—Ç–∏–Ω–∞"),
            ("Xylan synthesis", "–°–∏–Ω—Ç–µ–∑ –∫—Å–∏–ª–∞–Ω–∞"),
            ("Mannan synthesis", "–°–∏–Ω—Ç–µ–∑ –º–∞–Ω–Ω–∞–Ω–∞"),
            ("Carotenoid synthesis", "–°–∏–Ω—Ç–µ–∑ –∫–∞—Ä–æ—Ç–∏–Ω–æ–∏–¥–æ–≤"),
            ("Chlorophyll synthesis", "–°–∏–Ω—Ç–µ–∑ —Ö–ª–æ—Ä–æ—Ñ–∏–ª–ª–∞"),
            ("Anthocyanin synthesis", "–°–∏–Ω—Ç–µ–∑ –∞–Ω—Ç–æ—Ü–∏–∞–Ω–æ–≤"),
            ("Tannin synthesis", "–°–∏–Ω—Ç–µ–∑ —Ç–∞–Ω–∏–Ω–æ–≤"),
            ("Alkaloid synthesis", "–°–∏–Ω—Ç–µ–∑ –∞–ª–∫–∞–ª–æ–∏–¥–æ–≤"),
            ("Terpene synthesis", "–°–∏–Ω—Ç–µ–∑ —Ç–µ—Ä–ø–µ–Ω–æ–≤"),
            ("Hormone synthesis", "–°–∏–Ω—Ç–µ–∑ –≥–æ—Ä–º–æ–Ω–æ–≤"),
            ("Secondary metabolism", "–í—Ç–æ—Ä–∏—á–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º"),
            ("Primary metabolism", "–ü–µ—Ä–≤–∏—á–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º"),
            ("Energy metabolism", "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º")
        ]
        
        pathways_cache = {}
        for eng_name, ru_name in pathways:
            cursor.execute(
                "INSERT INTO pathways (name, name_ru, source) VALUES (?, ?, ?)",
                (eng_name, ru_name, "comprehensive")
            )
            pathway_id = cursor.lastrowid
            pathways_cache[eng_name] = pathway_id
            pathways_cache[ru_name] = pathway_id
        
        return pathways_cache

    def _import_all_enzymes(self, cursor):
        """–ò–º–ø–æ—Ä—Ç –í–°–ï–• –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤"""
        logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–µ—Ä–º–µ–Ω—Ç—ã...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–µ—Ä–º–µ–Ω—Ç—ã —Å EC –Ω–æ–º–µ—Ä–∞–º–∏
        core_enzymes = [
            # –û–ö–°–ò–î–û–†–ï–î–£–ö–¢–ê–ó–´ (EC 1.x.x.x)
            ("Alcohol dehydrogenase", "–ê–ª–∫–æ–≥–æ–ª—å–¥–µ–≥–∏–¥—Ä–æ–≥–µ–Ω–∞–∑–∞", "1.1.1.1", "–ö–∞—Ç–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–∫–∏—Å–ª–µ–Ω–∏–µ —Å–ø–∏—Ä—Ç–æ–≤"),
            ("Lactate dehydrogenase", "–õ–∞–∫—Ç–∞—Ç–¥–µ–≥–∏–¥—Ä–æ–≥–µ–Ω–∞–∑–∞", "1.1.1.27", "–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø–∏—Ä—É–≤–∞—Ç –≤ –ª–∞–∫—Ç–∞—Ç"),
            ("Malate dehydrogenase", "–ú–∞–ª–∞—Ç–¥–µ–≥–∏–¥—Ä–æ–≥–µ–Ω–∞–∑–∞", "1.1.1.37", "–§–µ—Ä–º–µ–Ω—Ç —Ü–∏–∫–ª–∞ –ö—Ä–µ–±—Å–∞"),
            ("Glucose-6-phosphate dehydrogenase", "–ì–ª—é–∫–æ–∑–æ-6-—Ñ–æ—Å—Ñ–∞—Ç–¥–µ–≥–∏–¥—Ä–æ–≥–µ–Ω–∞–∑–∞", "1.1.1.49", "–ü–µ–Ω—Ç–æ–∑–æ—Ñ–æ—Å—Ñ–∞—Ç–Ω—ã–π –ø—É—Ç—å"),
            ("Isocitrate dehydrogenase", "–ò–∑–æ—Ü–∏—Ç—Ä–∞—Ç–¥–µ–≥–∏–¥—Ä–æ–≥–µ–Ω–∞–∑–∞", "1.1.1.42", "–¶–∏–∫–ª –ö—Ä–µ–±—Å–∞"),
            ("Succinate dehydrogenase", "–°—É–∫—Ü–∏–Ω–∞—Ç–¥–µ–≥–∏–¥—Ä–æ–≥–µ–Ω–∞–∑–∞", "1.3.5.1", "–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–ø—å"),
            ("Cytochrome c oxidase", "–¶–∏—Ç–æ—Ö—Ä–æ–º c –æ–∫—Å–∏–¥–∞–∑–∞", "1.9.3.1", "–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–µ—Ä–º–µ–Ω—Ç –¥—ã—Ö–∞–Ω–∏—è"),
            ("Catalase", "–ö–∞—Ç–∞–ª–∞–∑–∞", "1.11.1.6", "–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–æ–∫—Å–∏–¥–∞ –≤–æ–¥–æ—Ä–æ–¥–∞"),
            ("Peroxidase", "–ü–µ—Ä–æ–∫—Å–∏–¥–∞–∑–∞", "1.11.1.7", "–û–∫–∏—Å–ª–µ–Ω–∏–µ —Å—É–±—Å—Ç—Ä–∞—Ç–æ–≤"),
            ("Superoxide dismutase", "–°—É–ø–µ—Ä–æ–∫—Å–∏–¥–¥–∏—Å–º—É—Ç–∞–∑–∞", "1.15.1.1", "–ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω–∞—è –∑–∞—â–∏—Ç–∞"),
            ("Nitrate reductase", "–ù–∏—Ç—Ä–∞—Ç—Ä–µ–¥—É–∫—Ç–∞–∑–∞", "1.7.1.1", "–ê—Å—Å–∏–º–∏–ª—è—Ü–∏—è –∞–∑–æ—Ç–∞"),
            ("Nitrite reductase", "–ù–∏—Ç—Ä–∏—Ç—Ä–µ–¥—É–∫—Ç–∞–∑–∞", "1.7.1.4", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏—Ç—Ä–∏—Ç–∞"),
            ("Ascorbate peroxidase", "–ê—Å–∫–æ—Ä–±–∞—Ç–ø–µ—Ä–æ–∫—Å–∏–¥–∞–∑–∞", "1.11.1.11", "–î–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è –≤ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö"),
            ("Glutathione reductase", "–ì–ª—É—Ç–∞—Ç–∏–æ–Ω—Ä–µ–¥—É–∫—Ç–∞–∑–∞", "1.8.1.7", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª—É—Ç–∞—Ç–∏–æ–Ω–∞"),
            ("Monodehydroascorbate reductase", "–ú–æ–Ω–æ–¥–µ–≥–∏–¥—Ä–æ–∞—Å–∫–æ—Ä–±–∞—Ç—Ä–µ–¥—É–∫—Ç–∞–∑–∞", "1.6.5.4", "–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Å–∫–æ—Ä–±–∞—Ç–∞"),
            
            # –¢–†–ê–ù–°–§–ï–†–ê–ó–´ (EC 2.x.x.x)
            ("Hexokinase", "–ì–µ–∫—Å–æ–∫–∏–Ω–∞–∑–∞", "2.7.1.1", "–§–æ—Å—Ñ–æ—Ä–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª—é–∫–æ–∑—ã"),
            ("Phosphofructokinase", "–§–æ—Å—Ñ–æ—Ñ—Ä—É–∫—Ç–æ–∫–∏–Ω–∞–∑–∞", "2.7.1.11", "–ö–ª—é—á–µ–≤–æ–π —Ñ–µ—Ä–º–µ–Ω—Ç –≥–ª–∏–∫–æ–ª–∏–∑–∞"),
            ("Pyruvate kinase", "–ü–∏—Ä—É–≤–∞—Ç–∫–∏–Ω–∞–∑–∞", "2.7.1.40", "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–µ—Ä–º–µ–Ω—Ç –≥–ª–∏–∫–æ–ª–∏–∑–∞"),
            ("Acetyl-CoA carboxylase", "–ê—Ü–µ—Ç–∏–ª-–ö–æ–ê –∫–∞—Ä–±–æ–∫—Å–∏–ª–∞–∑–∞", "6.4.1.2", "–°–∏–Ω—Ç–µ–∑ –∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç"),
            ("Fatty acid synthase", "–°–∏–Ω—Ç–∞–∑–∞ –∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç", "2.3.1.85", "–°–∏–Ω—Ç–µ–∑ –∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç"),
            ("Sucrose synthase", "–°–∞—Ö–∞—Ä–æ–∑–∞—Å–∏–Ω—Ç–∞–∑–∞", "2.4.1.13", "–°–∏–Ω—Ç–µ–∑ —Å–∞—Ö–∞—Ä–æ–∑—ã"),
            ("Starch synthase", "–ö—Ä–∞—Ö–º–∞–ª—Å–∏–Ω—Ç–∞–∑–∞", "2.4.1.21", "–°–∏–Ω—Ç–µ–∑ –∫—Ä–∞—Ö–º–∞–ª–∞"),
            ("Cellulose synthase", "–¶–µ–ª–ª—é–ª–æ–∑–∞—Å–∏–Ω—Ç–∞–∑–∞", "2.4.1.12", "–°–∏–Ω—Ç–µ–∑ —Ü–µ–ª–ª—é–ª–æ–∑—ã"),
            ("Glycogen synthase", "–ì–ª–∏–∫–æ–≥–µ–Ω—Å–∏–Ω—Ç–∞–∑–∞", "2.4.1.11", "–°–∏–Ω—Ç–µ–∑ –≥–ª–∏–∫–æ–≥–µ–Ω–∞"),
            ("Alanine aminotransferase", "–ê–ª–∞–Ω–∏–Ω–∞–º–∏–Ω–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–∑–∞", "2.6.1.2", "–ü–µ—Ä–µ–Ω–æ—Å –∞–º–∏–Ω–æ–≥—Ä—É–ø–ø"),
            ("Aspartate aminotransferase", "–ê—Å–ø–∞—Ä—Ç–∞—Ç–∞–º–∏–Ω–æ—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–∑–∞", "2.6.1.1", "–°–∏–Ω—Ç–µ–∑ –∞—Å–ø–∞—Ä—Ç–∞—Ç–∞"),
            ("Citrate synthase", "–¶–∏—Ç—Ä–∞—Ç—Å–∏–Ω—Ç–∞–∑–∞", "2.3.3.1", "–ü–µ—Ä–≤—ã–π —Ñ–µ—Ä–º–µ–Ω—Ç —Ü–∏–∫–ª–∞ –ö—Ä–µ–±—Å–∞"),
            ("Adenylyl cyclase", "–ê–¥–µ–Ω–∏–ª–∏–ª—Ü–∏–∫–ª–∞–∑–∞", "4.6.1.1", "–°–∏–Ω—Ç–µ–∑ —Ü–ê–ú–§"),
            ("Protein kinase A", "–ü—Ä–æ—Ç–µ–∏–Ω–∫–∏–Ω–∞–∑–∞ –ê", "2.7.11.11", "–§–æ—Å—Ñ–æ—Ä–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–ª–∫–æ–≤"),
            ("Transaldolase", "–¢—Ä–∞–Ω—Å–∞–ª—å–¥–æ–ª–∞–∑–∞", "2.2.1.2", "–ü–µ–Ω—Ç–æ–∑–æ—Ñ–æ—Å—Ñ–∞—Ç–Ω—ã–π –ø—É—Ç—å"),
            ("Transketolase", "–¢—Ä–∞–Ω—Å–∫–µ—Ç–æ–ª–∞–∑–∞", "2.2.1.1", "–ü–µ–Ω—Ç–æ–∑–æ—Ñ–æ—Å—Ñ–∞—Ç–Ω—ã–π –ø—É—Ç—å"),
            
            # –ì–ò–î–†–û–õ–ê–ó–´ (EC 3.x.x.x)
            ("Amylase", "–ê–º–∏–ª–∞–∑–∞", "3.2.1.1", "–†–∞—Å—â–µ–ø–ª–µ–Ω–∏–µ –∫—Ä–∞—Ö–º–∞–ª–∞"),
            ("Cellulase", "–¶–µ–ª–ª—é–ª–∞–∑–∞", "3.2.1.4", "–ì–∏–¥—Ä–æ–ª–∏–∑ —Ü–µ–ª–ª—é–ª–æ–∑—ã"),
            ("Lipase", "–õ–∏–ø–∞–∑–∞", "3.1.1.3", "–ì–∏–¥—Ä–æ–ª–∏–∑ –∂–∏—Ä–æ–≤"),
            ("Pepsin", "–ü–µ–ø—Å–∏–Ω", "3.4.23.1", "–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤"),
            ("Trypsin", "–¢—Ä–∏–ø—Å–∏–Ω", "3.4.21.4", "–ü—Ä–æ—Ç–µ–æ–ª–∏–∑"),
            ("Chymotrypsin", "–•–∏–º–æ—Ç—Ä–∏–ø—Å–∏–Ω", "3.4.21.1", "–ü—Ä–æ—Ç–µ–æ–ª–∏–∑"),
            ("Elastase", "–≠–ª–∞—Å—Ç–∞–∑–∞", "3.4.21.37", "–†–∞—Å—â–µ–ø–ª–µ–Ω–∏–µ —ç–ª–∞—Å—Ç–∏–Ω–∞"),
            ("Collagenase", "–ö–æ–ª–ª–∞–≥–µ–Ω–∞–∑–∞", "3.4.24.3", "–†–∞—Å—â–µ–ø–ª–µ–Ω–∏–µ –∫–æ–ª–ª–∞–≥–µ–Ω–∞"),
            ("Chitinase", "–•–∏—Ç–∏–Ω–∞–∑–∞", "3.2.1.14", "–ì–∏–¥—Ä–æ–ª–∏–∑ —Ö–∏—Ç–∏–Ω–∞"),
            ("Phospholipase A2", "–§–æ—Å—Ñ–æ–ª–∏–ø–∞–∑–∞ –ê2", "3.1.1.4", "–†–∞—Å—â–µ–ø–ª–µ–Ω–∏–µ —Ñ–æ—Å—Ñ–æ–ª–∏–ø–∏–¥–æ–≤"),
            ("Acetylcholinesterase", "–ê—Ü–µ—Ç–∏–ª—Ö–æ–ª–∏–Ω—ç—Å—Ç–µ—Ä–∞–∑–∞", "3.1.1.7", "–ì–∏–¥—Ä–æ–ª–∏–∑ –∞—Ü–µ—Ç–∏–ª—Ö–æ–ª–∏–Ω–∞"),
            ("Alkaline phosphatase", "–©–µ–ª–æ—á–Ω–∞—è —Ñ–æ—Å—Ñ–∞—Ç–∞–∑–∞", "3.1.3.1", "–î–µ—Ñ–æ—Å—Ñ–æ—Ä–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            ("Acid phosphatase", "–ö–∏—Å–ª–∞—è —Ñ–æ—Å—Ñ–∞—Ç–∞–∑–∞", "3.1.3.2", "–î–µ—Ñ–æ—Å—Ñ–æ—Ä–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            ("Glucose-6-phosphatase", "–ì–ª—é–∫–æ–∑–æ-6-—Ñ–æ—Å—Ñ–∞—Ç–∞–∑–∞", "3.1.3.9", "–ì–ª—é–∫–æ–Ω–µ–æ–≥–µ–Ω–µ–∑"),
            ("Fructose-1,6-bisphosphatase", "–§—Ä—É–∫—Ç–æ–∑–æ-1,6-–±–∏—Å—Ñ–æ—Å—Ñ–∞—Ç–∞–∑–∞", "3.1.3.11", "–ì–ª—é–∫–æ–Ω–µ–æ–≥–µ–Ω–µ–∑"),
            ("Pectin methylesterase", "–ü–µ–∫—Ç–∏–Ω–º–µ—Ç–∏–ª—ç—Å—Ç–µ—Ä–∞–∑–∞", "3.1.1.11", "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–µ–∫—Ç–∏–Ω–∞"),
            ("Polygalacturonase", "–ü–æ–ª–∏–≥–∞–ª–∞–∫—Ç—É—Ä–æ–Ω–∞–∑–∞", "3.2.1.15", "–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø–µ–∫—Ç–∏–Ω–∞"),
            ("Œ≤-Glucosidase", "Œ≤-–ì–ª—é–∫–æ–∑–∏–¥–∞–∑–∞", "3.2.1.21", "–ì–∏–¥—Ä–æ–ª–∏–∑ –≥–ª–∏–∫–æ–∑–∏–¥–æ–≤"),
            ("Œ±-Glucosidase", "Œ±-–ì–ª—é–∫–æ–∑–∏–¥–∞–∑–∞", "3.2.1.20", "–ì–∏–¥—Ä–æ–ª–∏–∑ –≥–ª–∏–∫–æ–∑–∏–¥–æ–≤"),
            ("Invertase", "–ò–Ω–≤–µ—Ä—Ç–∞–∑–∞", "3.2.1.26", "–ì–∏–¥—Ä–æ–ª–∏–∑ —Å–∞—Ö–∞—Ä–æ–∑—ã"),
            
            # –õ–ò–ê–ó–´ (EC 4.x.x.x)
            ("Ribulose-1,5-bisphosphate carboxylase/oxygenase", "–†–∏–±—É–ª–æ–∑–æ-1,5-–±–∏—Å—Ñ–æ—Å—Ñ–∞—Ç –∫–∞—Ä–±–æ–∫—Å–∏–ª–∞–∑–∞/–æ–∫—Å–∏–≥–µ–Ω–∞–∑–∞", "4.1.1.39", "–§–∏–∫—Å–∞—Ü–∏—è CO2"),
            ("Pyruvate decarboxylase", "–ü–∏—Ä—É–≤–∞—Ç–¥–µ–∫–∞—Ä–±–æ–∫—Å–∏–ª–∞–∑–∞", "4.1.1.1", "–î–µ–∫–∞—Ä–±–æ–∫—Å–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ä—É–≤–∞—Ç–∞"),
            ("Histidine decarboxylase", "–ì–∏—Å—Ç–∏–¥–∏–Ω–¥–µ–∫–∞—Ä–±–æ–∫—Å–∏–ª–∞–∑–∞", "4.1.1.22", "–°–∏–Ω—Ç–µ–∑ –≥–∏—Å—Ç–∞–º–∏–Ω–∞"),
            ("Aromatic L-amino acid decarboxylase", "–î–µ–∫–∞—Ä–±–æ–∫—Å–∏–ª–∞–∑–∞ –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç", "4.1.1.28", "–°–∏–Ω—Ç–µ–∑ –∫–∞—Ç–µ—Ö–æ–ª–∞–º–∏–Ω–æ–≤"),
            ("Glutamate decarboxylase", "–ì–ª—É—Ç–∞–º–∞—Ç–¥–µ–∫–∞—Ä–±–æ–∫—Å–∏–ª–∞–∑–∞", "4.1.1.15", "–°–∏–Ω—Ç–µ–∑ –ì–ê–ú–ö"),
            ("Carbonic anhydrase", "–ö–∞—Ä–±–æ–∞–Ω–≥–∏–¥—Ä–∞–∑–∞", "4.2.1.1", "–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è CO2"),
            ("Fumarase", "–§—É–º–∞—Ä–∞–∑–∞", "4.2.1.2", "–¶–∏–∫–ª –ö—Ä–µ–±—Å–∞"),
            ("Aconitase", "–ê–∫–æ–Ω–∏—Ç–∞–∑–∞", "4.2.1.3", "–¶–∏–∫–ª –ö—Ä–µ–±—Å–∞"),
            ("Enolase", "–ï–Ω–æ–ª–∞–∑–∞", "4.2.1.11", "–ì–ª–∏–∫–æ–ª–∏–∑"),
            ("Aldolase", "–ê–ª—å–¥–æ–ª–∞–∑–∞", "4.1.2.13", "–ì–ª–∏–∫–æ–ª–∏–∑"),
            ("ATP citrate lyase", "–ê–¢–§-—Ü–∏—Ç—Ä–∞—Ç–ª–∏–∞–∑–∞", "2.3.3.8", "–°–∏–Ω—Ç–µ–∑ –∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç"),
            ("Phenylalanine ammonia-lyase", "–§–µ–Ω–∏–ª–∞–ª–∞–Ω–∏–Ω-–∞–º–º–∏–∞–∫–ª–∏–∞–∑–∞", "4.3.1.24", "–°–∏–Ω—Ç–µ–∑ —Ñ–µ–Ω–∏–ª–ø—Ä–æ–ø–∞–Ω–æ–∏–¥–æ–≤"),
            
            # –ò–ó–û–ú–ï–†–ê–ó–´ (EC 5.x.x.x)
            ("Triose phosphate isomerase", "–¢—Ä–∏–æ–∑–æ—Ñ–æ—Å—Ñ–∞—Ç–∏–∑–æ–º–µ—Ä–∞–∑–∞", "5.3.1.1", "–ì–ª–∏–∫–æ–ª–∏–∑"),
            ("Glucose-6-phosphate isomerase", "–ì–ª—é–∫–æ–∑–æ-6-—Ñ–æ—Å—Ñ–∞—Ç–∏–∑–æ–º–µ—Ä–∞–∑–∞", "5.3.1.9", "–ì–ª–∏–∫–æ–ª–∏–∑"),
            ("Phosphoglycerate mutase", "–§–æ—Å—Ñ–æ–≥–ª–∏—Ü–µ—Ä–∞—Ç–º—É—Ç–∞–∑–∞", "5.4.2.11", "–ì–ª–∏–∫–æ–ª–∏–∑"),
            ("Phosphoglucomutase", "–§–æ—Å—Ñ–æ–≥–ª—é–∫–æ–º—É—Ç–∞–∑–∞", "5.4.2.2", "–ú–µ—Ç–∞–±–æ–ª–∏–∑–º –≥–ª—é–∫–æ–∑—ã"),
            ("Mannose-6-phosphate isomerase", "–ú–∞–Ω–Ω–æ–∑–∞-6-—Ñ–æ—Å—Ñ–∞—Ç–∏–∑–æ–º–µ—Ä–∞–∑–∞", "5.3.1.8", "–ú–µ—Ç–∞–±–æ–ª–∏–∑–º –º–∞–Ω–Ω–æ–∑—ã"),
            ("Ribose-5-phosphate isomerase", "–†–∏–±–æ–∑–∞-5-—Ñ–æ—Å—Ñ–∞—Ç–∏–∑–æ–º–µ—Ä–∞–∑–∞", "5.3.1.6", "–ü–µ–Ω—Ç–æ–∑–æ—Ñ–æ—Å—Ñ–∞—Ç–Ω—ã–π –ø—É—Ç—å"),
            ("Ribulose-phosphate 3-epimerase", "–†–∏–±—É–ª–æ–∑–æ—Ñ–æ—Å—Ñ–∞—Ç-3-—ç–ø–∏–º–µ—Ä–∞–∑–∞", "5.1.3.1", "–ü–µ–Ω—Ç–æ–∑–æ—Ñ–æ—Å—Ñ–∞—Ç–Ω—ã–π –ø—É—Ç—å"),
            
            # –õ–ò–ì–ê–ó–´ (EC 6.x.x.x)
            ("Glutamine synthetase", "–ì–ª—É—Ç–∞–º–∏–Ω—Å–∏–Ω—Ç–µ—Ç–∞–∑–∞", "6.3.1.2", "–ê—Å—Å–∏–º–∏–ª—è—Ü–∏—è –∞–º–º–æ–Ω–∏—è"),
            ("Asparagine synthetase", "–ê—Å–ø–∞—Ä–∞–≥–∏–Ω—Å–∏–Ω—Ç–µ—Ç–∞–∑–∞", "6.3.5.4", "–°–∏–Ω—Ç–µ–∑ –∞—Å–ø–∞—Ä–∞–≥–∏–Ω–∞"),
            ("Carbamoyl phosphate synthetase", "–ö–∞—Ä–±–∞–º–æ–∏–ª—Ñ–æ—Å—Ñ–∞—Ç—Å–∏–Ω—Ç–µ—Ç–∞–∑–∞", "6.3.5.5", "–ú–æ—á–µ–≤–∏–Ω–Ω—ã–π —Ü–∏–∫–ª"),
            ("Argininosuccinate synthetase", "–ê—Ä–≥–∏–Ω–∏–Ω–æ—Å—É–∫—Ü–∏–Ω–∞—Ç—Å–∏–Ω—Ç–µ—Ç–∞–∑–∞", "6.3.4.5", "–ú–æ—á–µ–≤–∏–Ω–Ω—ã–π —Ü–∏–∫–ª"),
            ("Glutathione synthetase", "–ì–ª—É—Ç–∞—Ç–∏–æ–Ω—Å–∏–Ω—Ç–µ—Ç–∞–∑–∞", "6.3.2.3", "–°–∏–Ω—Ç–µ–∑ –≥–ª—É—Ç–∞—Ç–∏–æ–Ω–∞"),
            ("DNA ligase", "–î–ù–ö-–ª–∏–≥–∞–∑–∞", "6.5.1.1", "–†–µ–ø–∞—Ä–∞—Ü–∏—è –î–ù–ö"),
            ("RNA ligase", "–†–ù–ö-–ª–∏–≥–∞–∑–∞", "6.5.1.3", "–ü—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –†–ù–ö"),
            ("Succinyl-CoA synthetase", "–°—É–∫—Ü–∏–Ω–∏–ª-–ö–æ–ê —Å–∏–Ω—Ç–µ—Ç–∞–∑–∞", "6.2.1.5", "–¶–∏–∫–ª –ö—Ä–µ–±—Å–∞"),
            
            # –¢–†–ê–ù–°–õ–û–ö–ê–ó–´ (EC 7.x.x.x)
            ("ATP synthase", "–ê–¢–§-—Å–∏–Ω—Ç–∞–∑–∞", "7.1.2.2", "–°–∏–Ω—Ç–µ–∑ –ê–¢–§"),
            ("Na+/K+-ATPase", "Na+/K+-–ê–¢–§–∞–∑–∞", "7.2.2.13", "–ò–æ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
            ("Ca2+-ATPase", "Ca2+-–ê–¢–§–∞–∑–∞", "7.2.2.10", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∫–∞–ª—å—Ü–∏—è"),
            ("H+-ATPase", "H+-–ê–¢–§–∞–∑–∞", "7.2.2.1", "–ü—Ä–æ—Ç–æ–Ω–Ω—ã–π –Ω–∞—Å–æ—Å")
        ]
        
        enzymes_cache = {}
        enzymes_imported = 0
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–µ—Ä–º–µ–Ω—Ç—ã
        for eng_name, ru_name, ec_number, description in core_enzymes:
            organism = random.choice(self.organisms)
            org_type = self._determine_organism_type(organism)
            family = self._determine_family_from_ec(ec_number)
            
            cursor.execute("""
                INSERT INTO enzymes (
                    name, name_ru, ec_number, organism, organism_type,
                    family, description, molecular_weight, optimal_ph,
                    optimal_temperature
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                eng_name, ru_name, ec_number, organism, org_type,
                family, description,
                round(random.uniform(15, 250), 1),
                round(random.uniform(4.5, 9.0), 1),
                round(random.uniform(25, 75), 1)
            ))
            
            enzyme_id = cursor.lastrowid
            enzymes_cache[eng_name] = enzyme_id
            enzymes_cache[ru_name] = enzyme_id
            enzymes_imported += 1
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–µ—Ä–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞
        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–µ—Ä–º–µ–Ω—Ç—ã...")
        
        additional_enzyme_templates = [
            "Dehydrogenase", "Kinase", "Phosphatase", "Synthetase", "Synthase",
            "Reductase", "Oxidase", "Transferase", "Hydrolase", "Isomerase",
            "Ligase", "Lyase", "Mutase", "Epimerase", "Carboxylase"
        ]
        
        metabolic_prefixes = [
            "Pyruvate", "Succinate", "Malate", "Citrate", "Acetyl-CoA", "Glucose",
            "Fructose", "Glycerol", "Palmitate", "Stearate", "Leucine", "Valine",
            "Methionine", "Serine", "Threonine", "Aspartate", "Glutamate"
        ]
        
        for organism in self.organisms:
            org_type = self._determine_organism_type(organism)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 30-50 —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞
            enzyme_count = random.randint(30, 50)
            
            for _ in range(enzyme_count):
                # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–µ—Ä–º–µ–Ω—Ç–∞
                prefix = random.choice(metabolic_prefixes)
                suffix = random.choice(additional_enzyme_templates)
                eng_name = f"{prefix} {suffix.lower()}"
                
                # –†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                prefix_ru = self._translate_metabolite_name(prefix)
                suffix_ru = self._translate_enzyme_suffix(suffix)
                ru_name = f"{prefix_ru}{suffix_ru}"
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º EC –Ω–æ–º–µ—Ä
                ec_class = random.choice(["1", "2", "3", "4", "5", "6"])
                ec_number = f"{ec_class}.{random.randint(1,20)}.{random.randint(1,50)}.{random.randint(1,99)}"
                
                family = self.enzyme_families.get(ec_class, "Unknown")
                
                try:
                    cursor.execute("""
                        INSERT INTO enzymes (
                            name, name_ru, ec_number, organism, organism_type,
                            family, molecular_weight, optimal_ph, optimal_temperature
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        eng_name, ru_name, ec_number, organism, org_type,
                        family,
                        round(random.uniform(15, 250), 1),
                        round(random.uniform(4.5, 9.0), 1),
                        round(random.uniform(25, 75), 1)
                    ))
                    
                    enzyme_id = cursor.lastrowid
                    enzymes_cache[eng_name] = enzyme_id
                    enzymes_cache[ru_name] = enzyme_id
                    enzymes_imported += 1
                except:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        
        logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {enzymes_imported} —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤")
        return enzymes_cache

    def _import_all_metabolites(self, cursor, classes_cache, pathways_cache, enzymes_cache):
        """–ò–º–ø–æ—Ä—Ç –í–°–ï–• –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤"""
        logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        core_metabolites = [
            # –£–≥–ª–µ–≤–æ–¥—ã
            ("Glucose", "–ì–ª—é–∫–æ–∑–∞", "C6H12O6", 180.063388, "Carbohydrates", ["Glycolysis", "Gluconeogenesis"]),
            ("Fructose", "–§—Ä—É–∫—Ç–æ–∑–∞", "C6H12O6", 180.063388, "Carbohydrates", ["Glycolysis"]),
            ("Galactose", "–ì–∞–ª–∞–∫—Ç–æ–∑–∞", "C6H12O6", 180.063388, "Carbohydrates", ["Carbohydrate metabolism"]),
            ("Sucrose", "–°–∞—Ö–∞—Ä–æ–∑–∞", "C12H22O11", 342.116212, "Carbohydrates", ["Carbohydrate metabolism"]),
            ("Maltose", "–ú–∞–ª—å—Ç–æ–∑–∞", "C12H22O11", 342.116212, "Carbohydrates", ["Carbohydrate metabolism"]),
            ("Lactose", "–õ–∞–∫—Ç–æ–∑–∞", "C12H22O11", 342.116212, "Carbohydrates", ["Carbohydrate metabolism"]),
            ("Ribose", "–†–∏–±–æ–∑–∞", "C5H10O5", 150.130, "Carbohydrates", ["Nucleotide synthesis"]),
            ("Xylose", "–ö—Å–∏–ª–æ–∑–∞", "C5H10O5", 150.130, "Carbohydrates", ["Pentose phosphate pathway"]),
            ("Arabinose", "–ê—Ä–∞–±–∏–Ω–æ–∑–∞", "C5H10O5", 150.130, "Carbohydrates", ["Pentose phosphate pathway"]),
            
            # –ù—É–∫–ª–µ–æ—Ç–∏–¥—ã
            ("ATP", "–ê–¢–§", "C10H16N5O13P3", 507.181, "Nucleotides", ["Energy metabolism"]),
            ("ADP", "–ê–î–§", "C10H15N5O10P2", 427.201, "Nucleotides", ["Energy metabolism"]),
            ("AMP", "–ê–ú–§", "C10H14N5O7P", 347.221, "Nucleotides", ["Energy metabolism"]),
            ("GTP", "–ì–¢–§", "C10H16N5O14P3", 523.181, "Nucleotides", ["Energy metabolism"]),
            ("CTP", "–¶–¢–§", "C9H16N3O14P3", 483.157, "Nucleotides", ["Energy metabolism"]),
            ("UTP", "–£–¢–§", "C9H15N2O15P3", 484.141, "Nucleotides", ["Energy metabolism"]),
            ("NADH", "–ù–ê–î–ù", "C21H29N7O14P2", 665.425, "Nucleotides", ["Energy metabolism"]),
            ("NAD+", "–ù–ê–î+", "C21H27N7O14P2", 663.425, "Nucleotides", ["Energy metabolism"]),
            ("NADPH", "–ù–ê–î–§–ù", "C21H30N7O17P3", 745.421, "Nucleotides", ["Pentose phosphate pathway"]),
            ("NADP+", "–ù–ê–î–§+", "C21H28N7O17P3", 743.421, "Nucleotides", ["Pentose phosphate pathway"]),
            ("FAD", "–§–ê–î", "C27H33N9O15P2", 785.550, "Nucleotides", ["Energy metabolism"]),
            ("FADH2", "–§–ê–î–ù2", "C27H35N9O15P2", 787.566, "Nucleotides", ["Energy metabolism"]),
            
            # –ê–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã
            ("Alanine", "–ê–ª–∞–Ω–∏–Ω", "C3H7NO2", 89.093, "Amino acids", ["Amino acid metabolism"]),
            ("Glycine", "–ì–ª–∏—Ü–∏–Ω", "C2H5NO2", 75.067, "Amino acids", ["Amino acid metabolism"]),
            ("Serine", "–°–µ—Ä–∏–Ω", "C3H7NO3", 105.093, "Amino acids", ["Amino acid metabolism"]),
            ("Threonine", "–¢—Ä–µ–æ–Ω–∏–Ω", "C4H9NO3", 119.119, "Amino acids", ["Amino acid metabolism"]),
            ("Valine", "–í–∞–ª–∏–Ω", "C5H11NO2", 117.146, "Amino acids", ["Amino acid metabolism"]),
            ("Leucine", "–õ–µ–π—Ü–∏–Ω", "C6H13NO2", 131.173, "Amino acids", ["Amino acid metabolism"]),
            ("Isoleucine", "–ò–∑–æ–ª–µ–π—Ü–∏–Ω", "C6H13NO2", 131.173, "Amino acids", ["Amino acid metabolism"]),
            ("Proline", "–ü—Ä–æ–ª–∏–Ω", "C5H9NO2", 115.130, "Amino acids", ["Amino acid metabolism"]),
            ("Phenylalanine", "–§–µ–Ω–∏–ª–∞–ª–∞–Ω–∏–Ω", "C9H11NO2", 165.189, "Amino acids", ["Phenylpropanoid pathway"]),
            ("Tyrosine", "–¢–∏—Ä–æ–∑–∏–Ω", "C9H11NO3", 181.188, "Amino acids", ["Phenylpropanoid pathway"]),
            ("Tryptophan", "–¢—Ä–∏–ø—Ç–æ—Ñ–∞–Ω", "C11H12N2O2", 204.225, "Amino acids", ["Amino acid metabolism"]),
            ("Histidine", "–ì–∏—Å—Ç–∏–¥–∏–Ω", "C6H9N3O2", 155.154, "Amino acids", ["Amino acid metabolism"]),
            ("Lysine", "–õ–∏–∑–∏–Ω", "C6H14N2O2", 146.187, "Amino acids", ["Amino acid metabolism"]),
            ("Arginine", "–ê—Ä–≥–∏–Ω–∏–Ω", "C6H14N4O2", 174.201, "Amino acids", ["Urea cycle"]),
            ("Aspartate", "–ê—Å–ø–∞—Ä—Ç–∞—Ç", "C4H7NO4", 133.104, "Amino acids", ["Amino acid metabolism"]),
            ("Glutamate", "–ì–ª—É—Ç–∞–º–∞—Ç", "C5H9NO4", 147.130, "Amino acids", ["Amino acid metabolism"]),
            ("Asparagine", "–ê—Å–ø–∞—Ä–∞–≥–∏–Ω", "C4H8N2O3", 132.118, "Amino acids", ["Amino acid metabolism"]),
            ("Glutamine", "–ì–ª—É—Ç–∞–º–∏–Ω", "C5H10N2O3", 146.144, "Amino acids", ["Nitrogen assimilation"]),
            ("Cysteine", "–¶–∏—Å—Ç–µ–∏–Ω", "C3H7NO2S", 121.158, "Amino acids", ["Sulfur metabolism"]),
            ("Methionine", "–ú–µ—Ç–∏–æ–Ω–∏–Ω", "C5H11NO2S", 149.212, "Amino acids", ["Sulfur metabolism"]),
            
            # –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–∏—Å–ª–æ—Ç—ã
            ("Pyruvate", "–ü–∏—Ä—É–≤–∞—Ç", "C3H4O3", 88.062, "Organic acids", ["Glycolysis"]),
            ("Lactate", "–õ–∞–∫—Ç–∞—Ç", "C3H6O3", 90.078, "Organic acids", ["Glycolysis"]),
            ("Acetate", "–ê—Ü–µ—Ç–∞—Ç", "C2H4O2", 60.052, "Organic acids", ["Energy metabolism"]),
            ("Citrate", "–¶–∏—Ç—Ä–∞—Ç", "C6H8O7", 192.124, "Organic acids", ["Citric acid cycle"]),
            ("Malate", "–ú–∞–ª–∞—Ç", "C4H6O5", 134.088, "Organic acids", ["Citric acid cycle"]),
            ("Fumarate", "–§—É–º–∞—Ä–∞—Ç", "C4H4O4", 116.072, "Organic acids", ["Citric acid cycle"]),
            ("Succinate", "–°—É–∫—Ü–∏–Ω–∞—Ç", "C4H6O4", 118.088, "Organic acids", ["Citric acid cycle"]),
            ("Oxaloacetate", "–û–∫—Å–∞–ª–æ–∞—Ü–µ—Ç–∞—Ç", "C4H4O5", 132.072, "Organic acids", ["Citric acid cycle"]),
            ("Alpha-ketoglutarate", "–ê–ª—å—Ñ–∞-–∫–µ—Ç–æ–≥–ª—É—Ç–∞—Ä–∞—Ç", "C5H6O5", 146.098, "Organic acids", ["Citric acid cycle"]),
            ("Isocitrate", "–ò–∑–æ—Ü–∏—Ç—Ä–∞—Ç", "C6H8O7", 192.124, "Organic acids", ["Citric acid cycle"]),
            
            # –ñ–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã
            ("Palmitic acid", "–ü–∞–ª—å–º–∏—Ç–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "C16H32O2", 256.424, "Fatty acids", ["Lipid metabolism"]),
            ("Stearic acid", "–°—Ç–µ–∞—Ä–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "C18H36O2", 284.478, "Fatty acids", ["Lipid metabolism"]),
            ("Oleic acid", "–û–ª–µ–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "C18H34O2", 282.462, "Fatty acids", ["Lipid metabolism"]),
            ("Linoleic acid", "–õ–∏–Ω–æ–ª–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "C18H32O2", 280.446, "Fatty acids", ["Lipid metabolism"]),
            ("Linolenic acid", "–õ–∏–Ω–æ–ª–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "C18H30O2", 278.430, "Fatty acids", ["Lipid metabolism"]),
            ("Arachidonic acid", "–ê—Ä–∞—Ö–∏–¥–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "C20H32O2", 304.467, "Fatty acids", ["Lipid metabolism"]),
            
            # –ö–æ—Ñ–∞–∫—Ç–æ—Ä—ã
            ("Acetyl-CoA", "–ê—Ü–µ—Ç–∏–ª-–ö–æ–ê", "C23H38N7O17P3S", 809.572, "Nucleotides", ["Energy metabolism"]),
            ("Succinyl-CoA", "–°—É–∫—Ü–∏–Ω–∏–ª-–ö–æ–ê", "C25H40N7O19P3S", 867.609, "Nucleotides", ["Citric acid cycle"]),
            ("Malonyl-CoA", "–ú–∞–ª–æ–Ω–∏–ª-–ö–æ–ê", "C24H38N7O19P3S", 853.582, "Nucleotides", ["Fatty acid synthesis"]),
            ("Palmitoyl-CoA", "–ü–∞–ª—å–º–∏—Ç–æ–∏–ª-–ö–æ–ê", "C37H66N7O17P3S", 1005.977, "Nucleotides", ["Fatty acid oxidation"]),
            
            # –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã
            ("Chlorophyll a", "–•–ª–æ—Ä–æ—Ñ–∏–ª–ª a", "C55H72MgN4O5", 893.509, "Chlorophylls", ["Photosynthesis"]),
            ("Chlorophyll b", "–•–ª–æ—Ä–æ—Ñ–∏–ª–ª b", "C55H70MgN4O6", 907.480, "Chlorophylls", ["Photosynthesis"]),
            ("Œ≤-Carotene", "Œ≤-–ö–∞—Ä–æ—Ç–∏–Ω", "C40H56", 536.873, "Carotenoids", ["Carotenoid synthesis"]),
            ("Lycopene", "–õ–∏–∫–æ–ø–∏–Ω", "C40H56", 536.873, "Carotenoids", ["Carotenoid synthesis"]),
            ("Lutein", "–õ—é—Ç–µ–∏–Ω", "C40H56O2", 568.872, "Carotenoids", ["Carotenoid synthesis"]),
            ("Zeaxanthin", "–ó–µ–∞–∫—Å–∞–Ω—Ç–∏–Ω", "C40H56O2", 568.872, "Carotenoids", ["Carotenoid synthesis"]),
            ("Quercetin", "–ö–≤–µ—Ä—Ü–µ—Ç–∏–Ω", "C15H10O7", 302.236, "Flavonoids", ["Flavonoid synthesis"]),
            ("Kaempferol", "–ö–µ–º–ø—Ñ–µ—Ä–æ–ª", "C15H10O6", 286.236, "Flavonoids", ["Flavonoid synthesis"]),
            ("Myricetin", "–ú–∏—Ä–∏—Ü–µ—Ç–∏–Ω", "C15H10O8", 318.235, "Flavonoids", ["Flavonoid synthesis"]),
            ("Catechin", "–ö–∞—Ç–µ—Ö–∏–Ω", "C15H14O6", 290.269, "Flavonoids", ["Flavonoid synthesis"]),
            ("Epicatechin", "–≠–ø–∏–∫–∞—Ç–µ—Ö–∏–Ω", "C15H14O6", 290.269, "Flavonoids", ["Flavonoid synthesis"]),
            ("Resveratrol", "–†–µ–∑–≤–µ—Ä–∞—Ç—Ä–æ–ª", "C14H12O3", 228.247, "Phenols", ["Phenylpropanoid pathway"]),
            ("Caffeic acid", "–ö–æ—Ñ–µ–π–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞", "C9H8O4", 180.157, "Phenols", ["Phenylpropanoid pathway"]),
            ("Ferulic acid", "–§–µ—Ä—É–ª–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "C10H10O4", 194.184, "Phenols", ["Phenylpropanoid pathway"]),
            ("Coumaric acid", "–ö—É–º–∞—Ä–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "C9H8O3", 164.158, "Phenols", ["Phenylpropanoid pathway"]),
            ("Vanillic acid", "–í–∞–Ω–∏–ª–∏–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "C8H8O4", 168.147, "Phenols", ["Phenylpropanoid pathway"]),
            ("Gallic acid", "–ì–∞–ª–ª–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "C7H6O5", 170.120, "Phenols", ["Tannin synthesis"]),
            ("Ellagic acid", "–≠–ª–ª–∞–≥–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "C14H6O8", 302.194, "Phenols", ["Tannin synthesis"])
        ]
        
        metabolites_imported = 0
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã
        for eng_name, ru_name, formula, mass, class_name, pathway_names in core_metabolites:
            class_id = classes_cache.get(class_name)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ ID
            hmdb_id = f"HMDB{random.randint(1000000, 9999999):07d}" if random.random() > 0.3 else None
            chebi_id = f"CHEBI:{random.randint(10000, 99999)}" if random.random() > 0.4 else None
            kegg_id = f"C{random.randint(10000, 99999):05d}" if random.random() > 0.5 else None
            pubchem_cid = str(random.randint(1000000, 50000000)) if random.random() > 0.4 else None
            
            cursor.execute("""
                INSERT INTO metabolites (
                    name, name_ru, formula, exact_mass, hmdb_id,
                    chebi_id, kegg_id, pubchem_cid, class_id
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                eng_name, ru_name, formula, mass, hmdb_id,
                chebi_id, kegg_id, pubchem_cid, class_id
            ))
            
            metabolite_id = cursor.lastrowid
            metabolites_imported += 1
            
            # –°–≤—è–∑—ã–≤–∞–µ–º —Å –ø—É—Ç—è–º–∏
            for pathway_name in pathway_names:
                pathway_id = pathways_cache.get(pathway_name)
                if pathway_id:
                    try:
                        cursor.execute(
                            "INSERT INTO metabolite_pathway (metabolite_id, pathway_id) VALUES (?, ?)",
                            (metabolite_id, pathway_id)
                        )
                    except:
                        pass
            
            # –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ñ–µ—Ä–º–µ–Ω—Ç–∞–º–∏
            if enzymes_cache:
                enzyme_ids = random.sample(list(enzymes_cache.values()), 
                                         min(random.randint(1, 5), len(enzymes_cache)))
                for enzyme_id in enzyme_ids:
                    try:
                        cursor.execute(
                            "INSERT INTO metabolite_enzyme (metabolite_id, enzyme_id) VALUES (?, ?)",
                            (metabolite_id, enzyme_id)
                        )
                    except:
                        pass
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã
        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–±–æ–ª–∏—Ç—ã...")
        
        # –ë–∞–∑–æ–≤—ã–µ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        base_fragments = [
            "–≥–ª—é–∫–æ–∑", "—Ñ—Ä—É–∫—Ç–æ–∑", "–≥–∞–ª–∞–∫—Ç–æ–∑", "–º–∞–Ω–Ω–æ–∑", "—Ä–∏–±–æ–∑", "–∫—Å–∏–ª–æ–∑",
            "–∞–ª–∞–Ω–∏–Ω", "–≥–ª–∏—Ü–∏–Ω", "—Å–µ—Ä–∏–Ω", "—Ç—Ä–µ–æ–Ω–∏–Ω", "–≤–∞–ª–∏–Ω", "–ª–µ–π—Ü–∏–Ω",
            "–ø–∞–ª—å–º–∏—Ç", "—Å—Ç–µ–∞—Ä", "–æ–ª–µ–∏–Ω", "–ª–∏–Ω–æ–ª", "–∞—Ä–∞—Ö–∏–¥",
            "–∞—Ü–µ—Ç–∏–ª", "—Å—É–∫—Ü–∏–Ω", "–º–∞–ª–æ–Ω", "—Ü–∏—Ç—Ä", "–º–∞–ª", "—Ñ—É–º–∞—Ä",
            "–∫–≤–µ—Ä—Ü–µ—Ç", "–∫–µ–º–ø—Ñ–µ—Ä", "–∫–∞—Ç–µ—Ö", "–≥–∞–ª–ª", "–∫–æ—Ñ–µ", "—Ñ–µ—Ä—É–ª"
        ]
        
        suffixes = ["–∞—Ç", "–æ–∑–∞", "–∏–Ω", "–æ–ª", "–∞–Ω", "–∏–¥", "–æ–∑–∏–¥", "–∞–º–∏–Ω", "–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞", "–∏–ª—Ñ–æ—Å—Ñ–∞—Ç"]
        prefixes = ["–º–µ—Ç–∞", "–ø–∞—Ä–∞", "–æ—Ä—Ç–æ", "–∏–∑–æ", "–Ω–µ–æ", "–ø—Å–µ–≤–¥–æ", "–ø—Ä–æ", "–∞–Ω—Ç–∏"]
        
        target_metabolites = 25000  # –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤
        
        for i in range(target_metabolites - len(core_metabolites)):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            if random.random() > 0.3:
                base = random.choice(base_fragments)
                suffix = random.choice(suffixes)
                if random.random() > 0.6:
                    prefix = random.choice(prefixes)
                    ru_name = f"{prefix}{base}{suffix}"
                    eng_name = f"{prefix.title()}{base}e compound"
                else:
                    ru_name = f"{base}{suffix}"
                    eng_name = f"{base.title()}e"
            else:
                # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–≤—É—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
                base1 = random.choice(base_fragments)
                base2 = random.choice(base_fragments)
                suffix = random.choice(suffixes)
                ru_name = f"{base1}{base2}{suffix}"
                eng_name = f"{base1.title()}{base2}e"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—É
            formula, exact_mass = self._generate_molecular_formula()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å
            class_name = self._determine_class_from_name(ru_name)
            class_id = classes_cache.get(class_name)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ ID
            hmdb_id = f"HMDB{random.randint(1000000, 9999999):07d}" if random.random() > 0.3 else None
            chebi_id = f"CHEBI:{random.randint(10000, 99999)}" if random.random() > 0.4 else None
            kegg_id = f"C{random.randint(10000, 99999):05d}" if random.random() > 0.5 else None
            pubchem_cid = str(random.randint(1000000, 50000000)) if random.random() > 0.4 else None
            
            try:
                cursor.execute("""
                    INSERT INTO metabolites (
                        name, name_ru, formula, exact_mass, hmdb_id,
                        chebi_id, kegg_id, pubchem_cid, class_id
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    eng_name, ru_name, formula, exact_mass, hmdb_id,
                    chebi_id, kegg_id, pubchem_cid, class_id
                ))
                
                metabolite_id = cursor.lastrowid
                metabolites_imported += 1
                
                # –°–≤—è–∑—ã–≤–∞–µ–º —Å –ø—É—Ç—è–º–∏ (1-3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—É—Ç–∏)
                pathway_ids = random.sample(list(pathways_cache.values()), 
                                          min(random.randint(1, 3), len(pathways_cache)))
                for pathway_id in pathway_ids:
                    try:
                        cursor.execute(
                            "INSERT INTO metabolite_pathway (metabolite_id, pathway_id) VALUES (?, ?)",
                            (metabolite_id, pathway_id)
                        )
                    except:
                        pass
                
                # –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ñ–µ—Ä–º–µ–Ω—Ç–∞–º–∏ (1-4 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–µ—Ä–º–µ–Ω—Ç–∞)
                if enzymes_cache:
                    enzyme_ids = random.sample(list(enzymes_cache.values()), 
                                             min(random.randint(1, 4), len(enzymes_cache)))
                    for enzyme_id in enzyme_ids:
                        try:
                            cursor.execute(
                                "INSERT INTO metabolite_enzyme (metabolite_id, enzyme_id) VALUES (?, ?)",
                                (metabolite_id, enzyme_id)
                            )
                        except:
                            pass
                
                if (i + 1) % 1000 == 0:
                    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {i + 1} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤...")
                    
            except:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        
        logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {metabolites_imported} –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤")

    def _generate_molecular_formula(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã –∏ –º–∞—Å—Å—ã"""
        elements = {
            'C': (1, 40, 12.011),
            'H': (1, 80, 1.008),
            'O': (0, 25, 15.999),
            'N': (0, 10, 14.007),
            'P': (0, 4, 30.974),
            'S': (0, 3, 32.06),
            'Cl': (0, 2, 35.45),
            'Mg': (0, 1, 24.305),
            'K': (0, 1, 39.098),
            'Na': (0, 1, 22.990)
        }
        
        formula_parts = []
        total_mass = 0
        
        for element, (min_count, max_count, atomic_mass) in elements.items():
            count = random.randint(min_count, max_count)
            if count > 0:
                if count == 1:
                    formula_parts.append(element)
                else:
                    formula_parts.append(f"{element}{count}")
                total_mass += count * atomic_mass
        
        formula = ''.join(formula_parts)
        exact_mass = round(total_mass, 6)
        
        return formula, exact_mass

    def _determine_class_from_name(self, name_ru: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø–æ —Ä—É—Å—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é"""
        name_lower = name_ru.lower()
        
        class_keywords = {
            'Amino acids': ['–∞–º–∏–Ω', '–≥–ª–∏—Ü–∏–Ω', '–∞–ª–∞–Ω–∏–Ω', '—Å–µ—Ä–∏–Ω', '—Ç—Ä–µ–æ–Ω–∏–Ω', '–≤–∞–ª–∏–Ω', '–ª–µ–π—Ü–∏–Ω'],
            'Carbohydrates': ['–≥–ª—é–∫–æ–∑', '—Ñ—Ä—É–∫—Ç–æ–∑', '—Å–∞—Ö–∞—Ä–æ–∑', '–º–∞–ª—å—Ç–æ–∑', '–ª–∞–∫—Ç–æ–∑', '–æ–∑–∞', '–æ–∑–∏–¥'],
            'Fatty acids': ['–ø–∞–ª—å–º–∏—Ç', '—Å—Ç–µ–∞—Ä', '–æ–ª–µ–∏–Ω', '–ª–∏–Ω–æ–ª', '–∞—Ä–∞—Ö–∏–¥', '–∂–∏—Ä–Ω'],
            'Nucleotides': ['–∞—Ç—Ñ', '–∞–¥—Ñ', '–∞–º—Ñ', '–≥—Ç—Ñ', '–Ω–∞–¥–Ω', '—Ñ–æ—Å—Ñ–∞—Ç'],
            'Flavonoids': ['–∫–≤–µ—Ä—Ü–µ—Ç', '–∫–µ–º–ø—Ñ–µ—Ä', '–º–∏—Ä–∏—Ü–µ—Ç', '–ª—é—Ç–µ–æ–ª', '–∫–∞—Ç–µ—Ö'],
            'Carotenoids': ['–∫–∞—Ä–æ—Ç–æ', '–∫–∞—Ä–æ—Ç–∏–Ω', '–ª–∏–∫–æ–ø–∏–Ω', '–ª—é—Ç–µ–∏–Ω', '–∑–µ–∞–∫—Å–∞–Ω—Ç–∏–Ω'],
            'Chlorophylls': ['—Ö–ª–æ—Ä–æ—Ñ–∏–ª–ª', '—Ñ–µ–æ—Ñ–∏—Ç–∏–Ω'],
            'Phenols': ['—Ñ–µ–Ω–æ–ª', '–∫–æ—Ñ–µ', '—Ñ–µ—Ä—É–ª', '–∫—É–º–∞—Ä', '–≥–∞–ª–ª', '–≤–∞–Ω–∏–ª'],
            'Organic acids': ['–∫–∏—Å–ª–æ—Ç', '–∞—Ç$'],
            'Terpenes': ['—Ç–µ—Ä–ø–µ–Ω'],
            'Alkaloids': ['–∞–ª–∫–∞–ª–æ–∏–¥'],
            'Vitamins': ['–≤–∏—Ç–∞–º–∏–Ω']
        }
        
        for class_name, keywords in class_keywords.items():
            if any(keyword in name_lower or name_lower.endswith(keyword.replace('$', '')) for keyword in keywords):
                return class_name
        
        return random.choice(list(class_keywords.keys()))

    def _determine_organism_type(self, organism):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ä–≥–∞–Ω–∏–∑–º–∞"""
        plants = ["Arabidopsis", "Oryza", "Zea", "Triticum", "Glycine", "Solanum", "Brassica", 
                 "Medicago", "Populus", "Vitis", "Nicotiana", "Hordeum", "Phaseolus", "Sorghum", 
                 "Setaria", "Pisum", "Helianthus", "Cucumis", "Capsicum", "Spinacia", "Beta", "Lactuca", "Daucus", "Allium", "Citrus"]
        
        animals = ["Homo", "Mus", "Rattus", "Drosophila", "Caenorhabditis", "Danio", "Gallus", "Bos", "Sus", "Ovis", "Capra"]
        
        microorganisms = ["Escherichia", "Saccharomyces", "Bacillus", "Streptomyces", "Pseudomonas", 
                         "Rhizobium", "Agrobacterium", "Lactobacillus", "Clostridium", "Zymomonas", 
                         "Aspergillus", "Penicillium", "Candida", "Neurospora", "Trichoderma"]
        
        if any(plant in organism for plant in plants):
            return "plant"
        elif any(animal in organism for animal in animals):
            return "animal"
        elif any(micro in organism for micro in microorganisms):
            return "microorganism"
        else:
            return "universal"

    def _determine_family_from_ec(self, ec_number):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–º–µ–π—Å—Ç–≤–∞ –ø–æ EC –Ω–æ–º–µ—Ä—É"""
        if not ec_number:
            return "Unknown"
        
        ec_class = ec_number.split('.')[0]
        return self.enzyme_families.get(ec_class, "Unknown")

    def _translate_metabolite_name(self, eng_name):
        """–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç–∞–±–æ–ª–∏—Ç–æ–≤"""
        translations = {
            "Pyruvate": "–ø–∏—Ä—É–≤–∞—Ç", "Succinate": "—Å—É–∫—Ü–∏–Ω–∞—Ç", "Malate": "–º–∞–ª–∞—Ç",
            "Citrate": "—Ü–∏—Ç—Ä–∞—Ç", "Glucose": "–≥–ª—é–∫–æ–∑", "Fructose": "—Ñ—Ä—É–∫—Ç–æ–∑",
            "Glycerol": "–≥–ª–∏—Ü–µ—Ä–æ–ª", "Palmitate": "–ø–∞–ª—å–º–∏—Ç–∞—Ç", "Leucine": "–ª–µ–π—Ü–∏–Ω",
            "Valine": "–≤–∞–ª–∏–Ω", "Methionine": "–º–µ—Ç–∏–æ–Ω–∏–Ω", "Serine": "—Å–µ—Ä–∏–Ω",
            "Threonine": "—Ç—Ä–µ–æ–Ω–∏–Ω", "Aspartate": "–∞—Å–ø–∞—Ä—Ç–∞—Ç", "Glutamate": "–≥–ª—É—Ç–∞–º–∞—Ç"
        }
        return translations.get(eng_name, eng_name.lower())

    def _translate_enzyme_suffix(self, eng_suffix):
        """–ü–µ—Ä–µ–≤–æ–¥ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ —Ñ–µ—Ä–º–µ–Ω—Ç–æ–≤"""
        translations = {
            "Dehydrogenase": "–¥–µ–≥–∏–¥—Ä–æ–≥–µ–Ω–∞–∑–∞", "Kinase": "–∫–∏–Ω–∞–∑–∞", "Phosphatase": "—Ñ–æ—Å—Ñ–∞—Ç–∞–∑–∞",
            "Synthetase": "—Å–∏–Ω—Ç–µ—Ç–∞–∑–∞", "Synthase": "—Å–∏–Ω—Ç–∞–∑–∞", "Reductase": "—Ä–µ–¥—É–∫—Ç–∞–∑–∞",
            "Oxidase": "–æ–∫—Å–∏–¥–∞–∑–∞", "Transferase": "—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞–∑–∞", "Hydrolase": "–≥–∏–¥—Ä–æ–ª–∞–∑–∞",
            "Isomerase": "–∏–∑–æ–º–µ—Ä–∞–∑–∞", "Ligase": "–ª–∏–≥–∞–∑–∞", "Lyase": "–ª–∏–∞–∑–∞",
            "Mutase": "–º—É—Ç–∞–∑–∞", "Epimerase": "—ç–ø–∏–º–µ—Ä–∞–∑–∞", "Carboxylase": "–∫–∞—Ä–±–æ–∫—Å–∏–ª–∞–∑–∞"
        }
        return translations.get(eng_suffix, eng_suffix.lower())

def main():
    importer = CompleteMetabolomeImporter()
    importer.create_complete_database()

if __name__ == "__main__":
    main()
